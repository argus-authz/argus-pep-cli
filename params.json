{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Argus pepcli","tagline":"Argus pepcli command line","google":"","body":"## Argus pepcli command\r\n\r\nThe `pepcli` command allows you to submit a XACML request to the PEP daemon and display the XACML response.\r\n\r\nThe command is very useful to check if a XACML policy applies (decision is `Permit`, `Deny`, `Not Applicable` or `Indeterminate`) for the given XACML request. Or to check if the XACML response correspond to the values you are expecting (`uidgid`, `secondary-gids`, ...) for the user mapping. \r\n\r\n### Documentation\r\n\r\nThe full documentation is available online https://twiki.cern.ch/twiki/bin/view/EGEE/AuthZPEPCCLI\r\n\r\n### Usage\r\n\r\n```\r\nUsage:\r\n    pepcli --pepd <URL> --keyinfo <FILE> [options...]\r\n    pepcli --pepd <URL> --subjectid <DN> [options...]\r\n\r\nSubmit a XACML Request to the PEP Server and show the XACML Response.\r\n\r\nOptions:\r\n -p|--pepd <URL>         Argus PEP server endpoint URL.\r\n -k|--keyinfo <FILE>     XACML Subject key-info: proxy or X509 file.\r\n -s|--subjectid <DN>     XACML Subject subject-id: user DN (format RFC2253).\r\n -f|--fqan <FQAN>        XACML Subject primary FQAN and FQANs\r\n                         Add multiple --fqan options for secondary FQANs.\r\n -r|--resourceid <URI>   XACML Resource resource-id.\r\n -a|--actionid <URI>     XACML Action action-id.\r\n --profileid <URI>       XACML profile-id (default TODO).\r\n -t|--timeout <SEC>      Connection timeout in second (default 30s).\r\n -x|--requestcontext     Show effective XACML Request context.\r\n -v|--verbose            Verbose.\r\n -q|--quiet              Turn off output.\r\n -d|--debug              Show debug information.\r\n -h|--help               This help.\r\n -V|--version            Display version and exit.\r\nTLS options:\r\n --capath <DIR>          Directory containing the server PEM encoded CA certificates.\r\n --cacert <FILE>         Server PEM encoded CA certificate filename.\r\n --cert <FILE>           Client PEM encoded certificate filename.\r\n --key <FILE>            Client PEM encoded private key filename.\r\n --keypasswd <PASSWD>    Password of the client private key\r\n                         If the --keypasswd is omitted and the private key is encrypted,\r\n                         then you will be prompted for the password.\r\n```"}